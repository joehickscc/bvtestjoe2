## This file was auto-generated by CloudCoreo CLI
## This file was automatically generated using the CloudCoreo CLI
##
## This config.rb file exists to create and maintain services not related to compute.
## for example, a VPC might be maintained using:
##
## coreo_aws_vpc_vpc "my-vpc" do
##   action :sustain
##   cidr "12.0.0.0/16"
##   internet_gateway true
## end
##

coreo_uni_util_jsrunner "tags-to-notifiers-array" do
  action :run
  json_input '{"stack name":"INSTANCE::stack_name",
  "instance name":"INSTANCE::name",
  "number_of_checks":"STACK::coreo_aws_advisor_elb.advise-elb.number_checks",
  "number_of_violations":"STACK::coreo_aws_advisor_elb.advise-elb.number_violations",
  "number_violations_ignored":"STACK::coreo_aws_advisor_elb.advise-elb.number_ignored_violations",
  "violations": STACK::coreo_aws_advisor_elb.advise-elb.report }'
  function <<-EOH
notifiers = [];

console.log('we are running');

violations=json_input['violations'];

for (instance_id in violations) {
  tags = violations[instance_id]['tags'];
  for (var i = 0; i < tags.length; i++) {
    if (tags[i]['key'] === 'bv:nexus:team') {
      var endpoint = {};
      endpoint['to'] = tags[i]['value'];
      endpoint['subject'] = 'CloudCoreo ELB Advisor alerts on ' + json_input['stack name'] + ' :: ' + json_input['instance name'];
      var notifier = {};
      notifier['type'] = 'email';
      notifier['send_on'] = 'always';
      notifier['allow_empty'] = 'true';
      notifier['payload_type'] = 'json';
      notifier['endpoint'] = endpoint;
      var aalert = {};
      aalert[instance_id] = violations[instance_id];
      notifier['payload'] = {};
      notifier['payload']['stack name'] = json_input['stack name'];
      notifier['payload']['instance name'] = json_input['instance name'];
      notifier['payload']['violations'] = aalert;
      notifiers.push(notifier);
    }
  }
}

callback(notifiers);
EOH
end

# we are still notifying the entire report to the configured recipient in advise-elb(notify)
coreo_uni_util_notify "advise-elb" do
  action :notify
  type 'email'
  allow_empty ${AUDIT_AWS_ELB_ALLOW_EMPTY}
  send_on "${AUDIT_AWS_ELB_SEND_ON}"
  payload '{"stack name":"INSTANCE::stack_name",
  "instance name":"INSTANCE::name",
  "number_of_checks":"STACK::coreo_aws_advisor_elb.advise-elb.number_checks",
  "number_of_violations":"STACK::coreo_aws_advisor_elb.advise-elb.number_violations",
  "number_violations_ignored":"STACK::coreo_aws_advisor_elb.advise-elb.number_ignored_violations",
  "violations": STACK::coreo_aws_advisor_elb.advise-elb.report }'
  payload_type "${AUDIT_AWS_ELB_PAYLOAD_TYPE}"
  endpoint ({
      :to => '${AUDIT_AWS_ELB_ALERT_RECIPIENT}', :subject => 'CloudCoreo elb advisor alerts on INSTANCE::stack_name :: INSTANCE::name'
  })
end

